variables:
  SRC_TF: "https://github.com/hashicorp/terraform"
  SRC_TF_BRANCH: v0.13.0-beta1
  SRC_AZDO: "https://github.com/microsoft/terraform-provider-azuredevops"
  AZDO_VER: "1.0.3"
  GO111MODULE: "on"
  PLUGIN_DIR: "/tmp/plugins"

stages:
- stage: MacStage
  displayName: 'Build for OSX'
  jobs:
  - job: BuildAzdoProvider
    displayName: 'Build the Infoblox Provider'
    pool:
      vmImage: 'macOS-10.14'
    steps:
    # azdo provider
    - bash: mkdir $PLUGIN_DIR
    - bash: mkdir -p ${GOPATH}/src/github.com/microsoft
    - bash: git clone $SRC_AZDO ${GOPATH}/src/github.com/microsoft/terraform-provider-azuredevops
    - bash: cd ${GOPATH}/src/github.com/imicrosoft/terraform-provider-azuredevops && make build
    - bash: ls -la ${GOPATH}/src/github.com/microsoft/terraform-provider-azuredevops
    - bash: mv ${GOPATH}/src/github.com/microsoft/terraform-provider-azuredevops/terraform-provider-azuredevops $PLUGIN_DIR/terraform-provider-azuredevops_v$AZDO_VER
    # tf tools
    - bash: git clone $SRC_TF /tmp/tfsource
    - bash: cd /tmp/tfsource && go install ./tools/terraform-bundle
    - bash: terraform-bundle package -plugin-dir $PLUGIN_DIR ./terraform-bundle.hcl
    - bash: ARTIFACT=`ls ./terraform_* | xargs -n 1 basename` && echo $ARTIFACT && echo "##vso[task.setvariable variable=ARTIFACT_NAME;isOutput=true]$ARTIFACT"
    - bash: ARTIFACT=`ls ./terraform_*` && mv ${ARTIFACT} $(Build.ArtifactStagingDirectory)
    - task: UniversalPackages@0
      displayName: Publish Terraform Bundle
      inputs:
        command: publish
        publishDirectory: '$(Build.ArtifactStagingDirectory)'
        vstsFeedPublish: 'Diehlabs/terraform-bundles'
        vstsFeedPackagePublish: 'terraform-cli-bundle-osx'
        packagePublishDescription: 'Terraform CLI Bundle'

- stage: LinuxStage
  displayName: 'Build for Linux x64'
  jobs:
  - job: BuildAzdoProvider
    displayName: 'Build the AZDO Provider'
    container: 'golang:latest'
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    # azdo provider
    - bash: mkdir $PLUGIN_DIR
    - bash: mkdir -p ${GOPATH}/src/github.com/microsoft
    - bash: git clone $SRC_AZDO ${GOPATH}/src/github.com/microsoft/terraform-provider-azuredevops
    - bash: cd ${GOPATH}/src/github.com/imicrosoft/terraform-provider-azuredevops && make build
    - bash: ls -la ${GOPATH}/src/github.com/microsoft/terraform-provider-azuredevops
    - bash: mv ${GOPATH}/src/github.com/microsoft/terraform-provider-azuredevops/terraform-provider-azuredevops $PLUGIN_DIR/terraform-provider-azuredevops_v$AZDO_VER
    # tf tools
    - bash: git clone --single-branch --branch $SRC_TF_BRANCH $SRC_TF /tmp/tfsource
    - bash: cd /tmp/tfsource && go install ./tools/terraform-bundle
    - bash: terraform-bundle package -plugin-dir $PLUGIN_DIR ./terraform-bundle.hcl
    - bash: ARTIFACT=`ls ./terraform_* | xargs -n 1 basename` && echo $ARTIFACT && echo "##vso[task.setvariable variable=ARTIFACT_NAME;isOutput=true]$ARTIFACT"
    - bash: ARTIFACT=`ls ./terraform_*` && mv ${ARTIFACT} $(Build.ArtifactStagingDirectory)
    - task: UniversalPackages@0
      displayName: Publish Terraform Bundle
      inputs:
        command: publish
        publishDirectory: '$(Build.ArtifactStagingDirectory)'
        vstsFeedPublish: 'Diehlabs/terraform-bundles'
        vstsFeedPackagePublish: 'terraform-cli-bundle-linux64'
        packagePublishDescription: 'Terraform CLI Bundle'

#    - publish: $(System.DefaultWorkingDirectory)/$(ARTIFACT_NAME)
      #artifact: $(ARTIFACT_NAME)